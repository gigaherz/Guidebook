<book title="Guidebook Manual" cover="gbook:covers/default" fontSize="1.0">

  <include ref="gbook:xml/standard.xml" />

  <chapter>
    <section>
      <!--
      'p' tags draw text, and increment the vertical offset.
      They do NOT behave exactly like in html.
      The space attribute changes the default spacing added after the paragraph.
      -->
      <p color="#606060" space="8">This book is a work in progress.</p>

      <p color="#606060">A web-based version of the documentation is available in the wiki on the github project.</p>

      <section-break />

      <!--
      'space' tags increment the vertical offset without drawing text.
      The 'height' attribute specifies how much.
      The % refers to a % of the section's height, while integer values refer to pixels.
      -->
      <space height="33%" />
      <p space="0" align="center" scale="2">Welcome</p>
      <p space="0" align="center" scale="2">to</p>
      <p space="0" align="center" scale="2">Guidebook</p>
      <p space="6" align="center" scale="2">__________</p>
      <p align="center" scale="1.5">by Gigaherz</p>
    </section>
    <section>
      <page_title>
        <title>Index</title>
      </page_title>
      <link ref="API">1. Adding new Books</link>
      <link indent="8" ref="API:registry">1.1. Book Registry (for mods)</link>
      <link indent="8" ref="API:respack">1.2. Resource Packs (for adv. maps)</link>
      <link indent="8" ref="API:configuration">1.3. Config. Folder (for modpacks)</link>
      <link ref="XML">2. Structure of the book</link>
      <link indent="8" ref="XML:pages">2.1. Chapters and Pages</link>
      <link indent="8" ref="XML:text">2.2. Paragraphs and titles</link>
      <link indent="8" ref="XML:images">2.3. Images and Links</link>
      <link indent="8" ref="XML:stacks">2.4. Item Stacks</link>
      <link ref="templates">3. Templates (WIP)</link>
      <link indent="8" ref="templates:recipes">3.1. Recipes (WIP)</link>
    </section>
  </chapter>
  <chapter id="API">
    <section>
      <page_title>
        <title>Adding new books</title>
      </page_title>
      <p>Guidebook has 3 ways to declare new books, designed for different purposes.</p>
      <p space="8">For modders: <link ref=":registry">the book registry API.</link></p>
      <p space="8">For adventure map authors: <link ref=":respack">resource packs.</link></p>
      <p space="8">For modpack authors: <link ref=":configuration">the configuration folder.</link></p>
      <p space="8">Afterward, you can give the books to the player by using the creative menu, or using a command (command-block) with</p>
      <p space="8">/give @p gbook:guidebook 1 0 {Book:"gbook:xml/book.xml"}</p>
      <p>Finally, you can make the mod give new players one or more books the first time they join (applies retroactively to existing players if enabled).</p>
      <p>This is available in the configuration file.</p>
    </section>
    <section id="registry">
      <page_title>
        <title>Book Registry</title>
      </page_title>
      <p space="8">The preferred way to access the registry is through the BookRegistryEvent. An example of use is provided below:</p>
      <p>@Optional.Method(modid="gbook")</p>
      <p>@SubscribeEvent</p>
      <p>public static void registerBook</p>
      <p indent="24">(BookRegistryEvent event)</p>
      <p>{</p>
      <p indent="8">event.register(</p>
      <p indent="16">new ResourceLocation(</p>
      <p indent="24">"modid:xml/book.xml"));</p>
      <p space="8">}</p>
      <p>The Optional annotation is needed to prevent a hard-dependency on the mod. The event parameter has a register method, that can be used to perform the registration.</p>
      <p>In order for this event to run, you need to annotate the class with @Mod.EventBusSubscriber.</p>
    </section>
    <section id="respack">
      <page_title>
        <title>Resource Packs</title>
      </page_title>
      <p space="8">The final way to provide books is to use a resource pack. This is useful for adventure map developers, and users who just want some extra books without unnecessary hassle.</p>
      <p space="8">Books will be placed as resources inside a resourcepack resource domain. That is, in a folder like `assets/gbook/` or similar. Note that it must be lowercase.</p>
      <p>If you don't know what resource domain to use, the preferred fallback should always be 'gbook' and not 'minecraft'. This is to avoid any potential future conflicts if Mojang ever decides to add resource-based custom books to the game.</p>
    </section>
    <section>
      <p>An example of structure is as follows:</p>
      <p indent="8">assets/</p>
      <p indent="16">gbook/</p>
      <p indent="24">books.json</p>
      <p indent="24">books/</p>
      <p indent="32">book1.xml</p>
      <p indent="32" space="8">book2.xml</p>
      <p space="8">The most important resource will be the `books.json` file, which will have to reside at the root of any resource domain. This JSON-formatted file will contain a single array, with the list of books inside. It will look like this:</p>
      <p indent="8" space="8">[ "gbook:books/book1.xml", "gbook:books/book2.xml", ... ]</p>
      <p>These resources are additive. That means an upper resource pack will not be able to remove books registered by a lower one, unlike normal resources which are replaced by upper packs.</p>
    </section>
    <section id="configuration">
      <page_title>
        <title>Configuration Folder</title>
      </page_title>
      <p space="8">If you are a modpack author, you may want to add custom books available to everyone using your pack. This can be done by using the `config/books/` folder (it may need to be created). This folder will behave like a resource pack, except the contents inside will be limited to the `gbook` resource domain.</p>
      <p space="8">See the previous section for details on how to declare books in a resource pack.</p>
    </section>
    <section>
      <p>The difference is, in this case, you would see this structure:</p>
      <p indent="8">config/books/</p>
      <p indent="16">books.json</p>
      <p indent="24">books/</p>
      <p indent="32">book1.xml</p>
      <p indent="40" space="8">book2.xml</p>

      <p>The contents of the 'books.json' would remain the same as if using a resource pack:</p>
      <p indent="8" space="8">[ "gbook:books/book1.xml", "gbook:books/book2.xml", ... ]</p>
    </section>
  </chapter>
  <chapter id="XML">
    <section>
      <page_title>
        <title>Getting Started</title>
      </page_title>
      <p space="8">Book files are XML documents. At the root is the 'book' tag. This tag has two optional attributes: 'title', for the name shown in the item tooltip, and 'cover', for the resource location of a cover texture.</p>
      <p indent="8">&lt;book title=&quot;Demo&quot;&gt;</p>
      <p indent="16">...</p>
      <p indent="8">&lt;/book&gt;</p>
    </section>
    <section id="pages">
      <page_title>
        <title>Chapters and Pages</title>
      </page_title>
      <p>Books are split into chapters. At least one chapter must be present. Chapters have an optional 'id' attribute for use in links.</p>
      <p>Chapters are split into pages. Pages can also have an 'id' attribute.</p>
      <p indent="8">&lt;chapter id=&quot;ch1&quot;&gt;</p>
      <p indent="16">&lt;section id=&quot;pg1&quot;&gt;</p>
      <p indent="24">...</p>
      <p indent="16">&lt;/section&gt;</p>
      <p indent="8">&lt;/chapter&gt;</p>
    </section>
    <section id="text">
      <page_title>
        <title>Paragraphs and titles</title>
      </page_title>
      <p space="8">Inside pages there can be text, alongside other section elements. The primary way of adding text is through paragraph elements 'p'.</p>
      <p indent="12" space="8">&lt;p&gt;Text&lt;/p&gt;</p>
      <p space="12">Text</p>
      <p space="8">There's many reasons to want different colors and alignments. This can be accomplished with the 'color' and 'align' attributes.</p>
      <p indent="8" space="8">&lt;p color=&quot;#606060&quot; align=&quot;center&quot;&gt; Centered Gray Text&lt;/p&gt;</p>
      <p color="#606060" align="center" space="12">Centered Gray Text</p>
      <p space="8">You can also customize the text appearance, using the 'bold', 'italics', and 'underline' attributes.</p>
      <p indent="8" space="8">&lt;p bold=&quot;true&quot; italics=&quot;true&quot;&gt;Formatted text&lt;/p&gt;</p>
      <p bold="true" italics="true">Formatted text</p>
      <section-break />
      <p space="8">Sometimes, you need indented text, or you want to change the separation between successive paragraphs, for this, you have 'indent' and 'space', respectively.</p>
      <p indent="8" space="8">&lt;p indent=&quot;20&quot; space=&quot;20&quot;&gt;Indented spaced text&lt;/p&gt;</p>
      <p indent="20" space="20">Indented spaced text</p>
      <p space="12">Text after</p>
      <p space="8">To make text larger or smaller, you can specify the 'scale' attribute, which takes a decimal number</p>
      <p indent="8">&lt;p scale="1.0"&gt;normal&lt;/p&gt;</p>
      <p indent="8">&lt;p scale="1.5"&gt;larger&lt;/p&gt;</p>
      <p indent="8" space="8">&lt;p scale="2.0"&gt;huge&lt;/p&gt;</p>
      <p scale="1.0" align="center">normal</p>
      <p scale="1.5" align="center">larger</p>
      <p scale="2.0" align="center">huge</p>
    </section>
    <section>
      <p space="8">Finally, to avoid writing so many formatting codes. Section titles can be shortened with the 'title' tag, which has different default formattings.</p>
      <p indent="8" space="8">&lt;title&gt;Title Here&lt;/title&gt;</p>
      <title>Title Here</title>
    </section>
    <section id="images">
      <title>Images and Links</title>
      <p space="8" indent="22">Fire</p>
      <p>Image tags let you draw a piece of an image. The 'x', 'y', 'w', 'h' attributes define the location and size to draw.</p>
      <p>The location to draw from the texture is taken from the 'tx' and 'ty' attributes, if not zero. If the image size is not exactly 256x256, you will have to specify the total size of the texture in 'tw' and 'th' attributes.</p>
      <p space="8">Image tags are relative to the current vertical offset, but they do not increment the vertical offset.</p>
      <p indent="8" space="8">&lt;image src=&quot;minecraft:item/coal&quot; tw=&quot;16&quot; th=&quot;16&quot; /&gt;</p>
      <image src="minecraft:item/coal" tw="16" th="16" />
      <p>Links:</p>
      <p><link href="https://www.curseforge.com/">Web Link (opens curseforge.com)</link></p>
      <p><link action="copyText" text="Hi!">Copy to Clipboard</link></p>
      <p><link action="copyToChat" text="/give @p minecraft:debug_stick">Copy to Chat (useful for commands)</link></p>
    </section>
    <section id="stacks">
      <title>Item Stacks</title>
      <p space="8">Stack tags let you show an item stack in the book. The stack will show the icon and count, and if hovered, the tooltip.</p>
      <p space="8">Like images, stack tags are relative to the current vertical offset, but they do not increment the vertical offset.</p>
      <p space="8">By using the stack-links feature, you can make certain stacks turn into links to a section. As an example, the stack below will lead to the recipes section in this book.</p>
      <p indent="8" space="8">&lt;stack item=&quot;minecraft:coal&quot; meta=&quot;0&quot; count=&quot;2&quot; /&gt;</p>
      <stack item="minecraft:coal" meta="0" count="2" />
    </section>
  </chapter>
  <chapter id="recipes">
    <section id="recipes">
      <page_title>
        <p>Recipes</p>
      </page_title>
      <p space="8">Recipe tags let you display the recipe(s) for a specified item or block inside the guidebook.</p>
      <p space="8" color="505050">They have three attributes: type, which specifies the type of recipe to use; indent, (same as paragraph); index, (See Recipe Indices). </p>
      <p space="12">Finally, to specify the desired output item, simply include a Stack tag inside of a &lt;recipe.result&gt; sub-tag as follows:</p>
      <p indent="0" color="505050">&lt;recipe type="crafting"&gt;</p>
      <p indent="6" color="505050">&lt;recipe.result&gt;</p>
      <p indent="12" color="505050">&lt;stack item="minecraft:comparator"/&gt;</p>
      <p indent="6" color="505050">&lt;/recipe.result&gt;</p>
      <p indent="0" color="505050">&lt;/recipe&gt;</p>
      <section-break/>
      <p space="6">Which produces the following RecipePanel:</p>
      <recipe type="crafting">
        <recipe.result>
          <stack item="minecraft:comparator"/>
        </recipe.result>
      </recipe>
      <space height="3"/>
      <divider/>
      <p indent="8" color="505050">type="shapeless"</p>
      <p indent="8" color="505050">item="minecraft:ender_eye"</p>
      <space height="4"/>
      <recipe type="crafting">
        <recipe.result>
          <stack item="minecraft:ender_eye"/>
        </recipe.result>
      </recipe>
      <space height="3"/>
      <divider/>
      <p indent="8" color="505050">type="furnace"</p>
      <p indent="8" color="505050">item="minecraft:iron_nugget"</p>
      <space height="4"/>
      <recipe type="smelting">
        <recipe.result>
          <stack item="minecraft:iron_nugget"/>
        </recipe.result>
      </recipe>
    </section>
    <section id="recipe_keys">
      <page_title>
        <p>Recipe Keys</p>
      </page_title>
      <p space="12">Another way to declare a recipe is to use its registry name. Simply use the key attribute and specify the domain ("minecraft" by default) as well as the path for the json file that the recipe was contained in. For example, the following XML:</p>
      <p indent="8" color="505050">&lt;recipe type="crafting" key="minecraft:fire_charge"/&gt;</p>
      <recipe type="crafting" key="minecraft:fire_charge"/>
    </section>
    <section>
      <p indent="8" color="505050">type="crafting"</p>
      <p space="12" indent="8" color="1E50A0">key="minecraft:red_terracotta"</p>
      <recipe type="crafting" key="minecraft:red_terracotta"/>
      <space height="12"/>
      <divider/>
      <space height="6"/>
      <p color="8C3321">Warning: This feature will NOT work with recipe systems that have recipes without a registry key. This may be the case with custom recipe systems, so take care when using this feature and verify that the recipe system you are using supports it.</p>
    </section>
    <section id="recipe_indices">
      <page_title>
        <p>Recipe Indices</p>
      </page_title>
      <p space="10">Recipe indices let you specify to the recipe search to use a particular occurrence of the target result.</p>
      <p space="10" color="505050">This becomes useful when an item has more than one recipe which produces it.</p>
      <p>For example, searching for a shaped recipe which produces a gold ingot will result in two possible recipes: One that converts from nuggets to ingots; and another that converts from blocks to ingots. Using the recipe index allows book authors to specify only one of these:</p>
    </section>
    <section>
      <p indent="8" color="505050">type="crafting"</p>
      <p indent="8" color="1E50A0">index="0"</p>
      <p indent="8" color="505050">item="minecraft:gold_ingot"</p>
      <space height="8"/>
      <recipe type="crafting" index="0">
        <recipe.result>
          <stack item="minecraft:gold_ingot"/>
        </recipe.result>
      </recipe>
      <space height="7"/>
      <divider/>
      <space height="5"/>
      <p indent="8" color="505050">type="crafting"</p>
      <p indent="8" color="1E50A0">index="1"</p>
      <p indent="8" color="505050">item="minecraft:gold_ingot"</p>
      <space height="8"/>
      <recipe type="crafting" index="1">
        <recipe.result>
          <stack item="minecraft:gold_ingot"/>
        </recipe.result>
      </recipe>
    </section>
  </chapter>
  <chapter id="templates">
    <section>
      <title>Templates</title>
      <p>Guidebook offers a template system, that allows declaring a pattern that can be repeated multiple times.</p>
    </section>
    <section>
      <title>Template Libraries</title>
      <p>Templates can be defined inside template library files, and thosefiles can be included from books.</p>
      <p>Browse this mod's source code on GitHub for an example of use and declaration.</p>
    </section>
    <section>
      <p>Although the recipe panel system exists, another way to display recipes is to declare them using the template system. The result looks as follows:</p>
      <big_recipe>
        <space/>
        <space/>
        <space/>
        <stack tag="forge:dyes/red"/>
        <stack item="minecraft:slime_ball"/>
        <stack tag="forge:dyes/red"/>
        <stack item="minecraft:gold_nugget"/>
        <stack item="minecraft:bucket"/>
        <stack item="minecraft:gold_nugget"/>
        <stack item="minecraft:glass_bottle"/>
      </big_recipe>

      <big_recipe>
        <space/>
        <space/>
        <space/>
        <stack name="minecraft:oak_planks" />
        <stack name="minecraft:oak_planks" />
        <stack name="minecraft:oak_planks" />
        <stack name="minecraft:oak_planks" />
        <stack name="minecraft:oak_planks" />
        <stack name="minecraft:oak_planks" />
        <stack name="minecraft:oak_trapdoor" />
      </big_recipe>
    </section>
  </chapter>
  <stack-links>
    <stack item="minecraft:coal">:recipes</stack>
  </stack-links>
</book>
