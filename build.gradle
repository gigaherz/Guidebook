buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        maven { url='https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'

repositories {
    maven {
        url 'https://dogforce-games.com/maven'
    }
    maven {
        url "https://maven.tterrag.com/"
    }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven {
        // game stages
        url 'https://maven.blamejared.com'
    }
    mavenLocal()
}

version = "3.5.0"
group = "dev.gigaherz.guidebook"
archivesBaseName = "Guidebook-UNKNOWN"

project.afterEvaluate {
    archivesBaseName = "Guidebook-${project.MC_VERSION}"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: 'official', version: '1.19'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', ''
            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                gbook {
                    source sourceSets.main
                    source sourceSets.test
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', ''
            property 'forge.logging.console.level', 'debug'


            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                gbook {
                    source sourceSets.main
                }
            }
        }
        data {
            property 'forge.logging.markers', ''
            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            args '--mod', 'gbook', '--all', '--output', file('src/test/resources/'), '--existing', file('src/main/resources/')

            mods {
                gbook {
                    source sourceSets.main
                    source sourceSets.test
                }
            }
        }
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.19-41.0.17'


    compileOnly fg.deobf("mezz.jei:jei-1.19-common-api:11.0.0.206")
    runtimeOnly fg.deobf("mezz.jei:jei-1.19-forge:11.0.0.206")

    implementation fg.deobf( "net.darkhax.gamestages:GameStages-Forge-1.19:9.0.1")
    implementation fg.deobf( "net.darkhax.bookshelf:Bookshelf-Forge-1.19:14.0.2")
}

jar {
    from('/') {
        include 'LICENSE.txt'
    }

    manifest {
        attributes([
                "Specification-Title": "guidebook",
                "Specification-Vendor": "gigaherz",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": archiveVersion,
                "Implementation-Vendor" :"gigaherz",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "Maven-Artifact":"${project.group}:${project.archivesBaseName}:${project.version}"
        ])
    }
}

tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

project.afterEvaluate {
    publish.dependsOn('build')
    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId project.archivesBaseName
                from components.java

                //artifact sourceJar

                pom.withXml {
                    asNode().dependencies.dependency.each { dep ->
                        if (dep.groupId.last().value().last() in ["net.minecraftforge", "mezz.jei",
                                                                  "net.darkhax.gamestages", "net.darkhax.bookshelf"]) {
                            assert dep.parent().remove(dep)
                        }
                    }
                }
            }
        }

        repositories {
            if (findProperty("RELEASE") && System.env.giga_maven_host != null) {
                System.out.println("Remote publish enabled on " + System.env.giga_maven_host)
                maven {
                    url System.env.giga_maven_host
                    credentials {
                        username System.env.giga_maven_user
                        password System.env.giga_maven_password
                    }
                }
            }
            else {
                System.out.println("Remote publish disabled.")
                maven {
                    url "$projectDir/../CommonMaven"
                }
            }
        }
    }
}
